#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–ø—É—Å–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import json
import time
from datetime import datetime, timedelta
from typing import List, Dict, Any

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from advanced_trading_system import AdvancedTradingAlertSystem
from config import *
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/examples.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TradingSystemExamples:
    """–ö–ª–∞—Å—Å —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.system = AdvancedTradingAlertSystem()
        
    def example_1_basic_scan(self):
        """–ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞"""
        print("\n" + "="*50)
        print("–ü–†–ò–ú–ï–† 1: –ë–ê–ó–û–í–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï")
        print("="*50)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            alerts = self.system.scan_market()
            
            print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {len(alerts)}")
            
            for i, alert in enumerate(alerts[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"\nüö® –ê–ª–µ—Ä—Ç #{i}:")
                print(f"   –°–∏–º–≤–æ–ª: {alert['symbol']}")
                print(f"   –¢–∏–ø: {alert['setup_type']}")
                print(f"   –í—Ö–æ–¥: ${alert['entry_price']:.4f}")
                print(f"   –°—Ç–æ–ø: ${alert['stop_loss']:.4f}")
                print(f"   –¶–µ–ª—å: ${alert['take_profit']:.4f}")
                print(f"   R:R: 1:{alert['risk_reward']:.1f}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {alert['confidence']:.1f}%")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            
    def example_2_filtered_scan(self):
        """–ü—Ä–∏–º–µ—Ä 2: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        print("\n" + "="*50)
        print("–ü–†–ò–ú–ï–† 2: –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –° –§–ò–õ–¨–¢–†–ê–ú–ò")
        print("="*50)
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        custom_config = {
            'risk_per_trade': 8.0,  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫
            'min_risk_reward': 2.5,  # –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π R:R
            'max_stop_loss': 3.0,    # –ë–æ–ª—å—à–∏–π —Å—Ç–æ–ø
            'min_volume_24h': 5000000,  # –ú–µ–Ω—å—à–∏–π –æ–±—ä–µ–º
            'min_confidence': 60.0   # –ü–æ–Ω–∏–∂–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        }
        
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            original_config = {
                'risk_per_trade': TRADING_CONFIG['risk_per_trade'],
                'min_risk_reward': TRADING_CONFIG['min_risk_reward'],
                'max_stop_loss': TRADING_CONFIG['max_stop_loss']
            }
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            TRADING_CONFIG.update(custom_config)
            MARKET_FILTERS.update({
                'min_volume_24h': custom_config['min_volume_24h']
            })
            
            alerts = self.system.scan_market()
            
            print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {len(alerts)}")
            print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –†–∏—Å–∫ {custom_config['risk_per_trade']}%, R:R 1:{custom_config['min_risk_reward']}")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            TRADING_CONFIG.update(original_config)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            
    def example_3_watchlist_scan(self):
        """–ü—Ä–∏–º–µ—Ä 3: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ watchlist"""
        print("\n" + "="*50)
        print("–ü–†–ò–ú–ï–† 3: –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï WATCHLIST")
        print("="*50)
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–π watchlist
        custom_watchlist = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'DOTUSDT', 'LINKUSDT']
        
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º watchlist
            original_watchlist = WATCHLIST.copy()
            WATCHLIST.clear()
            WATCHLIST.extend(custom_watchlist)
            
            alerts = self.system.scan_market()
            
            print(f"\nüìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ watchlist: {custom_watchlist}")
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {len(alerts)}")
            
            for alert in alerts:
                print(f"   {alert['symbol']}: {alert['setup_type']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {alert['confidence']:.1f}%)")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π watchlist
            WATCHLIST.clear()
            WATCHLIST.extend(original_watchlist)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ watchlist: {e}")
            
    def example_4_setup_analysis(self):
        """–ü—Ä–∏–º–µ—Ä 4: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ç–∞–ø–∞"""
        print("\n" + "="*50)
        print("–ü–†–ò–ú–ï–† 4: –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –°–ï–¢–ê–ü–ê")
        print("="*50)
        
        symbol = 'BTCUSDT'
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            data_provider = self.system.data_provider
            market_data = data_provider.get_ohlcv_data(symbol, '1h', 100)
            
            if market_data is not None and not market_data.empty:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                enhanced_data = data_provider.add_technical_indicators(market_data)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç–∞–ø—ã
                setup_detector = self.system.setup_detector
                setups = setup_detector.detect_all_setups(symbol, enhanced_data)
                
                print(f"\nüìà –ê–Ω–∞–ª–∏–∑ {symbol}:")
                print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${enhanced_data['close'].iloc[-1]:.2f}")
                print(f"   RSI: {enhanced_data['rsi'].iloc[-1]:.1f}")
                print(f"   –û–±—ä–µ–º (24—á): {enhanced_data['volume'].iloc[-24:].sum():,.0f}")
                
                if setups:
                    print(f"\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ—Ç–∞–ø—ã:")
                    for setup in setups:
                        print(f"   ‚Ä¢ {setup.setup_type}: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {setup.confidence:.1f}%")
                        print(f"     –í—Ö–æ–¥: ${setup.entry_price:.4f}, –°—Ç–æ–ø: ${setup.stop_loss:.4f}")
                        print(f"     R:R: 1:{setup.risk_reward:.1f}")
                else:
                    print("   ‚ùå –°–µ—Ç–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ —Å–µ—Ç–∞–ø–∞: {e}")
            
    def example_5_backtesting_simulation(self):
        """–ü—Ä–∏–º–µ—Ä 5: –°–∏–º—É–ª—è—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        print("\n" + "="*50)
        print("–ü–†–ò–ú–ï–† 5: –°–ò–ú–£–õ–Ø–¶–ò–Ø –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–ê")
        print("="*50)
        
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            start_balance = 220.0
            current_balance = start_balance
            trades_count = 0
            winning_trades = 0
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–ª–µ—Ä—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            try:
                with open('data/alerts_history.json', 'r', encoding='utf-8') as f:
                    alerts_history = json.load(f)
            except FileNotFoundError:
                alerts_history = []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            week_ago = datetime.now() - timedelta(days=7)
            recent_alerts = [
                alert for alert in alerts_history 
                if datetime.fromisoformat(alert['timestamp'].replace('Z', '+00:00')) > week_ago
            ]
            
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ {len(recent_alerts)} –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
            
            for alert in recent_alerts[:10]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10
                # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏ (—Å–ª—É—á–∞–π–Ω—ã–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
                import random
                
                risk_amount = current_balance * (alert.get('risk_percentage', 5) / 100)
                
                # 70% —à–∞–Ω—Å –Ω–∞ —É—Å–ø–µ—Ö (–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ)
                if random.random() < 0.7:
                    # –£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞
                    profit = risk_amount * alert.get('risk_reward', 3)
                    current_balance += profit
                    winning_trades += 1
                    result = "‚úÖ –ü—Ä–∏–±—ã–ª—å"
                else:
                    # –£–±—ã—Ç–æ—á–Ω–∞—è —Å–¥–µ–ª–∫–∞
                    current_balance -= risk_amount
                    result = "‚ùå –£–±—ã—Ç–æ–∫"
                
                trades_count += 1
                
                print(f"   –°–¥–µ–ª–∫–∞ #{trades_count}: {alert['symbol']} - {result}")
                print(f"   –ë–∞–ª–∞–Ω—Å: ${current_balance:.2f}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_return = ((current_balance - start_balance) / start_balance) * 100
            win_rate = (winning_trades / trades_count * 100) if trades_count > 0 else 0
            
            print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ú–£–õ–Ø–¶–ò–ò:")
            print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${start_balance:.2f}")
            print(f"   –ö–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${current_balance:.2f}")
            print(f"   –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:+.1f}%")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {trades_count}")
            print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {win_rate:.1f}%")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: {e}")
            
    def example_6_market_conditions_analysis(self):
        """–ü—Ä–∏–º–µ—Ä 6: –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        print("\n" + "="*50)
        print("–ü–†–ò–ú–ï–† 6: –ê–ù–ê–õ–ò–ó –†–´–ù–û–ß–ù–´–• –£–°–õ–û–í–ò–ô")
        print("="*50)
        
        try:
            data_provider = self.system.data_provider
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º BTC –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞
            btc_data = data_provider.get_ohlcv_data('BTCUSDT', '1d', 30)
            
            if btc_data is not None and not btc_data.empty:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                btc_enhanced = data_provider.add_technical_indicators(btc_data)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥
                current_price = btc_enhanced['close'].iloc[-1]
                ema_21 = btc_enhanced['ema'].iloc[-1]
                rsi = btc_enhanced['rsi'].iloc[-1]
                
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
                change_7d = ((current_price - btc_enhanced['close'].iloc[-8]) / btc_enhanced['close'].iloc[-8]) * 100
                change_30d = ((current_price - btc_enhanced['close'].iloc[-31]) / btc_enhanced['close'].iloc[-31]) * 100
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                if current_price > ema_21 and rsi > 50 and change_7d > 0:
                    market_condition = "üü¢ –ë—ã—á–∏–π —Ä—ã–Ω–æ–∫"
                    recommendation = "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è, –ª–æ–Ω–≥–æ–≤—ã–µ —Å–µ—Ç–∞–ø—ã"
                elif current_price < ema_21 and rsi < 50 and change_7d < -5:
                    market_condition = "üî¥ –ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫"
                    recommendation = "–û—Å—Ç–æ—Ä–æ–∂–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è, –∏–∑–±–µ–≥–∞—Ç—å –ª–æ–Ω–≥–æ–≤"
                else:
                    market_condition = "üü° –ë–æ–∫–æ–≤–æ–π —Ä—ã–Ω–æ–∫"
                    recommendation = "–£–º–µ—Ä–µ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è, —Å–∫–∞–ª—å–ø–∏–Ω–≥"
                
                print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–´–ù–û–ß–ù–´–• –£–°–õ–û–í–ò–ô (BTC):")
                print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}")
                print(f"   EMA(21): ${ema_21:,.2f}")
                print(f"   RSI: {rsi:.1f}")
                print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 7 –¥–Ω–µ–π: {change_7d:+.1f}%")
                print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 30 –¥–Ω–µ–π: {change_30d:+.1f}%")
                print(f"\nüéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞: {market_condition}")
                print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}")
                
                # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if "–ë—ã—á–∏–π" in market_condition:
                    print(f"\n‚öôÔ∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
                    print(f"   –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: 7-10%")
                    print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π R:R: 1:2.5")
                    print(f"   –§–æ–∫—É—Å –Ω–∞: –ø—Ä–æ–±–æ–∏, –∏–º–ø—É–ª—å—Å—ã")
                elif "–ú–µ–¥–≤–µ–∂–∏–π" in market_condition:
                    print(f"\n‚öôÔ∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
                    print(f"   –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: 3-5%")
                    print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π R:R: 1:4")
                    print(f"   –§–æ–∫—É—Å –Ω–∞: –æ—Ç—Å–∫–æ–∫–∏ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–µ–∫")
                else:
                    print(f"\n‚öôÔ∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
                    print(f"   –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: 5-7%")
                    print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π R:R: 1:3")
                    print(f"   –§–æ–∫—É—Å –Ω–∞: –¥–∏–∞–ø–∞–∑–æ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: {e}")
            
    def example_7_performance_monitoring(self):
        """–ü—Ä–∏–º–µ—Ä 7: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        print("\n" + "="*50)
        print("–ü–†–ò–ú–ï–† 7: –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("="*50)
        
        try:
            start_time = time.time()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            print("\n‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
            
            # 1. –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            data_start = time.time()
            market_data = self.system.data_provider.get_ohlcv_data('BTCUSDT', '1h', 100)
            data_time = time.time() - data_start
            print(f"   –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {data_time:.2f}—Å")
            
            # 2. –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            if market_data is not None:
                indicators_start = time.time()
                enhanced_data = self.system.data_provider.add_technical_indicators(market_data)
                indicators_time = time.time() - indicators_start
                print(f"   –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {indicators_time:.2f}—Å")
                
                # 3. –°–∫–æ—Ä–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–µ—Ç–∞–ø–æ–≤
                detection_start = time.time()
                setups = self.system.setup_detector.detect_all_setups('BTCUSDT', enhanced_data)
                detection_time = time.time() - detection_start
                print(f"   –î–µ—Ç–µ–∫—Ü–∏—è —Å–µ—Ç–∞–ø–æ–≤: {detection_time:.2f}—Å")
            
            # 4. –û–±—â–µ–µ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            scan_start = time.time()
            alerts = self.system.scan_market()
            scan_time = time.time() - scan_start
            print(f"   –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {scan_time:.2f}—Å")
            
            total_time = time.time() - start_time
            
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
            print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.2f}—Å")
            print(f"   –ù–∞–π–¥–µ–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {len(alerts)}")
            print(f"   –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(alerts)/scan_time:.1f} –∞–ª–µ—Ä—Ç–æ–≤/—Å–µ–∫")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            if scan_time > 30:
                print(f"\n‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
                print(f"   ‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                print(f"   ‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã")
            else:
                print(f"\n‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            
    def run_all_examples(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –ü–†–ò–ú–ï–†–û–í –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        examples = [
            self.example_1_basic_scan,
            self.example_2_filtered_scan,
            self.example_3_watchlist_scan,
            self.example_4_setup_analysis,
            self.example_5_backtesting_simulation,
            self.example_6_market_conditions_analysis,
            self.example_7_performance_monitoring
        ]
        
        for i, example in enumerate(examples, 1):
            try:
                print(f"\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ {i}/7...")
                example()
                time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–∏–º–µ—Ä–∞–º–∏
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ {i}: {e}")
                continue
        
        print("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python examples.py --example 1")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    examples = TradingSystemExamples()
    
    if len(sys.argv) > 1 and sys.argv[1] == '--example':
        if len(sys.argv) > 2:
            example_num = int(sys.argv[2])
            if example_num == 1:
                examples.example_1_basic_scan()
            elif example_num == 2:
                examples.example_2_filtered_scan()
            elif example_num == 3:
                examples.example_3_watchlist_scan()
            elif example_num == 4:
                examples.example_4_setup_analysis()
            elif example_num == 5:
                examples.example_5_backtesting_simulation()
            elif example_num == 6:
                examples.example_6_market_conditions_analysis()
            elif example_num == 7:
                examples.example_7_performance_monitoring()
            else:
                print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã: 1-7")
        else:
            print("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏–º–µ—Ä–∞: python examples.py --example 1")
    else:
        examples.run_all_examples()

if __name__ == "__main__":
    main()