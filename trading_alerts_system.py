#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞
–ê–≤—Ç–æ—Ä: AI Assistant
–û–ø–∏—Å–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Ç–∞–ø–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import ccxt
import pandas as pd
import numpy as np
import requests
import time
import json
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
import logging
from dataclasses import dataclass
import ta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_alerts.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class TradingSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ç–∞–ø–∞"""
    symbol: str
    setup_type: str
    entry_price: float
    stop_loss: float
    take_profit: float
    risk_reward: float
    confidence: float
    timestamp: datetime
    description: str

class BinanceDataProvider:
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å Binance"""
    
    def __init__(self):
        self.exchange = ccxt.binance({
            'apiKey': '',  # –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á
            'secret': '',  # –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
            'sandbox': False,
            'rateLimit': 1200,
        })
        
    def get_top_volume_symbols(self, limit: int = 50) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –º–æ–Ω–µ—Ç –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤"""
        try:
            tickers = self.exchange.fetch_tickers()
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã
            usdt_pairs = {k: v for k, v in tickers.items() if k.endswith('/USDT')}
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
            sorted_pairs = sorted(usdt_pairs.items(), 
                                key=lambda x: x[1]['quoteVolume'] or 0, 
                                reverse=True)
            return [pair[0] for pair in sorted_pairs[:limit]]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return []
    
    def get_ohlcv_data(self, symbol: str, timeframe: str = '1h', limit: int = 100) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∏—Ç—å OHLCV –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            ohlcv = self.exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            return df
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return pd.DataFrame()

class TechnicalAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    @staticmethod
    def calculate_sma(data: pd.Series, period: int) -> pd.Series:
        """–ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è"""
        return ta.trend.sma_indicator(data, window=period)
    
    @staticmethod
    def calculate_ema(data: pd.Series, period: int) -> pd.Series:
        """–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è"""
        return ta.trend.ema_indicator(data, window=period)
    
    @staticmethod
    def calculate_rsi(data: pd.Series, period: int = 14) -> pd.Series:
        """–ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã"""
        return ta.momentum.rsi(data, window=period)
    
    @staticmethod
    def find_support_resistance(df: pd.DataFrame, window: int = 20) -> Tuple[List[float], List[float]]:
        """–ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        highs = df['high'].rolling(window=window, center=True).max()
        lows = df['low'].rolling(window=window, center=True).min()
        
        resistance_levels = []
        support_levels = []
        
        for i in range(window, len(df) - window):
            if df['high'].iloc[i] == highs.iloc[i]:
                resistance_levels.append(df['high'].iloc[i])
            if df['low'].iloc[i] == lows.iloc[i]:
                support_levels.append(df['low'].iloc[i])
        
        return support_levels, resistance_levels

class SetupDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Ç–∞–ø–æ–≤"""
    
    def __init__(self, analyzer: TechnicalAnalyzer):
        self.analyzer = analyzer
    
    def detect_breakout_setup(self, df: pd.DataFrame, symbol: str) -> Optional[TradingSetup]:
        """–î–µ—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–±–æ—è —É—Ä–æ–≤–Ω—è"""
        if len(df) < 50:
            return None
            
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        support_levels, resistance_levels = self.analyzer.find_support_resistance(df)
        
        if not resistance_levels:
            return None
        
        current_price = df['close'].iloc[-1]
        recent_high = df['high'].iloc[-5:].max()
        volume_avg = df['volume'].iloc[-20:].mean()
        current_volume = df['volume'].iloc[-1]
        
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        nearest_resistance = min(resistance_levels, 
                               key=lambda x: abs(x - current_price) if x > current_price else float('inf'))
        
        # –£—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–±–æ—è:
        # 1. –¶–µ–Ω–∞ –±–ª–∏–∑–∫–æ –∫ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—é (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2%)
        # 2. –û–±—ä–µ–º –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
        # 3. –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
        if (abs(current_price - nearest_resistance) / current_price < 0.02 and
            current_volume > volume_avg * 1.5 and
            current_price > df['close'].iloc[-10:].mean()):
            
            entry_price = nearest_resistance * 1.005  # –í—Ö–æ–¥ –Ω–∞ 0.5% –≤—ã—à–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            stop_loss = current_price * 0.98  # –°—Ç–æ–ø –Ω–∞ 2% –Ω–∏–∂–µ
            take_profit = entry_price + (entry_price - stop_loss) * 3  # R:R 1:3
            
            return TradingSetup(
                symbol=symbol,
                setup_type="Breakout",
                entry_price=entry_price,
                stop_loss=stop_loss,
                take_profit=take_profit,
                risk_reward=3.0,
                confidence=0.7,
                timestamp=datetime.now(),
                description=f"–ü—Ä–æ–±–æ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ {nearest_resistance:.4f}"
            )
        
        return None
    
    def detect_higher_lows_setup(self, df: pd.DataFrame, symbol: str) -> Optional[TradingSetup]:
        """–î–µ—Ç–µ–∫—Ç–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Higher Lows"""
        if len(df) < 30:
            return None
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–∞
        lows = []
        for i in range(5, len(df) - 5):
            if (df['low'].iloc[i] < df['low'].iloc[i-5:i].min() and 
                df['low'].iloc[i] < df['low'].iloc[i+1:i+6].min()):
                lows.append((i, df['low'].iloc[i]))
        
        if len(lows) < 3:
            return None
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–∏–Ω–∏–º—É–º–∞
        recent_lows = lows[-3:]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π –º–∏–Ω–∏–º—É–º –≤—ã—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
        if (recent_lows[1][1] > recent_lows[0][1] and 
            recent_lows[2][1] > recent_lows[1][1]):
            
            current_price = df['close'].iloc[-1]
            resistance_levels, _ = self.analyzer.find_support_resistance(df)
            
            if resistance_levels:
                nearest_resistance = min(resistance_levels, 
                                       key=lambda x: abs(x - current_price) if x > current_price else float('inf'))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –ø–æ–¥ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º
                if current_price < nearest_resistance * 0.98:
                    entry_price = nearest_resistance * 1.002
                    stop_loss = recent_lows[-1][1] * 0.995
                    take_profit = entry_price + (entry_price - stop_loss) * 3
                    
                    return TradingSetup(
                        symbol=symbol,
                        setup_type="Higher Lows",
                        entry_price=entry_price,
                        stop_loss=stop_loss,
                        take_profit=take_profit,
                        risk_reward=3.0,
                        confidence=0.8,
                        timestamp=datetime.now(),
                        description=f"Higher Lows –ø–æ–¥ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º {nearest_resistance:.4f}"
                    )
        
        return None

class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, telegram_token: str = None, chat_id: str = None):
        self.telegram_token = telegram_token
        self.chat_id = chat_id
    
    def send_telegram_alert(self, setup: TradingSetup) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        if not self.telegram_token or not self.chat_id:
            logger.warning("Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        message = f"""
üö® –¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ üö®

üí∞ –ú–æ–Ω–µ—Ç–∞: {setup.symbol}
üìà –¢–∏–ø: {setup.setup_type}
üíµ –í—Ö–æ–¥: {setup.entry_price:.4f}
üõë –°—Ç–æ–ø: {setup.stop_loss:.4f}
üéØ –¶–µ–ª—å: {setup.take_profit:.4f}
üìä R:R: 1:{setup.risk_reward:.1f}
‚≠ê –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {setup.confidence*100:.0f}%
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {setup.description}
‚è∞ –í—Ä–µ–º—è: {setup.timestamp.strftime('%H:%M:%S')}
        """
        
        url = f"https://api.telegram.org/bot{self.telegram_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        try:
            response = requests.post(url, data=data)
            return response.status_code == 200
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    def save_to_file(self, setup: TradingSetup, filename: str = "alerts.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –≤ —Ñ–∞–π–ª"""
        alert_data = {
            'symbol': setup.symbol,
            'setup_type': setup.setup_type,
            'entry_price': setup.entry_price,
            'stop_loss': setup.stop_loss,
            'take_profit': setup.take_profit,
            'risk_reward': setup.risk_reward,
            'confidence': setup.confidence,
            'timestamp': setup.timestamp.isoformat(),
            'description': setup.description
        }
        
        try:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    alerts = json.load(f)
            except FileNotFoundError:
                alerts = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–ª–µ—Ä—Ç
            alerts.append(alert_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(alerts, f, ensure_ascii=False, indent=2)
                
            logger.info(f"–ê–ª–µ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª: {e}")

class TradingAlertSystem:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self, telegram_token: str = None, chat_id: str = None):
        self.data_provider = BinanceDataProvider()
        self.analyzer = TechnicalAnalyzer()
        self.detector = SetupDetector(self.analyzer)
        self.notification_manager = NotificationManager(telegram_token, chat_id)
        self.processed_setups = set()  # –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    
    def scan_markets(self, symbols: List[str] = None) -> List[TradingSetup]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        if symbols is None:
            symbols = self.data_provider.get_top_volume_symbols(30)
        
        found_setups = []
        
        for symbol in symbols:
            try:
                logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {symbol}...")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                df = self.data_provider.get_ohlcv_data(symbol, '1h', 100)
                if df.empty:
                    continue
                
                # –§–∏–ª—å—Ç—Ä –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º)
                avg_volume = df['volume'].mean()
                if avg_volume < 1000000:  # –ú–∏–Ω–∏–º—É–º $1M —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä–µ–º–∞
                    continue
                
                # –ò—â–µ–º —Å–µ—Ç–∞–ø—ã
                breakout_setup = self.detector.detect_breakout_setup(df, symbol)
                if breakout_setup:
                    setup_id = f"{symbol}_{breakout_setup.setup_type}_{breakout_setup.timestamp.date()}"
                    if setup_id not in self.processed_setups:
                        found_setups.append(breakout_setup)
                        self.processed_setups.add(setup_id)
                
                higher_lows_setup = self.detector.detect_higher_lows_setup(df, symbol)
                if higher_lows_setup:
                    setup_id = f"{symbol}_{higher_lows_setup.setup_type}_{higher_lows_setup.timestamp.date()}"
                    if setup_id not in self.processed_setups:
                        found_setups.append(higher_lows_setup)
                        self.processed_setups.add(setup_id)
                
                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è API
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                continue
        
        return found_setups
    
    def run_continuous_scan(self, interval_minutes: int = 60):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤"""
        logger.info("–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        while True:
            try:
                logger.info("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                setups = self.scan_markets()
                
                for setup in setups:
                    logger.info(f"–ù–∞–π–¥–µ–Ω —Å–µ—Ç–∞–ø: {setup.symbol} - {setup.setup_type}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    self.notification_manager.send_telegram_alert(setup)
                    self.notification_manager.save_to_file(setup)
                
                if not setups:
                    logger.info("–°–µ—Ç–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {interval_minutes} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
                time.sleep(interval_minutes * 60)
                
            except KeyboardInterrupt:
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
    TELEGRAM_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"  # –ü–æ–ª—É—á–∏—Ç—å —É @BotFather
    CHAT_ID = "YOUR_CHAT_ID"  # –í–∞—à Telegram ID
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    alert_system = TradingAlertSystem(TELEGRAM_TOKEN, CHAT_ID)
    
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
    test_setups = alert_system.scan_markets(['BTC/USDT', 'ETH/USDT', 'BNB/USDT'])
    
    for setup in test_setups:
        print(f"\n–ù–∞–π–¥–µ–Ω —Å–µ—Ç–∞–ø:")
        print(f"–°–∏–º–≤–æ–ª: {setup.symbol}")
        print(f"–¢–∏–ø: {setup.setup_type}")
        print(f"–í—Ö–æ–¥: {setup.entry_price}")
        print(f"–°—Ç–æ–ø: {setup.stop_loss}")
        print(f"–¶–µ–ª—å: {setup.take_profit}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {setup.description}")
    
    # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å:
    # alert_system.run_continuous_scan(interval_minutes=30)