#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Streamlit –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import json
import time
from datetime import datetime, timedelta
import threading
from advanced_trading_system import AdvancedTradingAlertSystem
from config import Config
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Trading Alerts Dashboard",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏ CSS
st.markdown("""
<style>
.metric-card {
    background-color: #f0f2f6;
    padding: 1rem;
    border-radius: 0.5rem;
    border-left: 4px solid #1f77b4;
}
.alert-card {
    background-color: #fff;
    padding: 1rem;
    border-radius: 0.5rem;
    border: 1px solid #ddd;
    margin-bottom: 1rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.success-alert {
    border-left: 4px solid #28a745;
}
.warning-alert {
    border-left: 4px solid #ffc107;
}
.danger-alert {
    border-left: 4px solid #dc3545;
}
</style>
""", unsafe_allow_html=True)

class DashboardManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞"""
    
    def __init__(self):
        self.system = None
        self.monitoring_active = False
        self.monitoring_thread = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
        if 'alerts_history' not in st.session_state:
            st.session_state.alerts_history = []
        if 'system_status' not in st.session_state:
            st.session_state.system_status = '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
        if 'last_scan_time' not in st.session_state:
            st.session_state.last_scan_time = None
        if 'scan_results' not in st.session_state:
            st.session_state.scan_results = []
    
    def initialize_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if self.system is None:
                self.system = AdvancedTradingAlertSystem()
                st.session_state.system_status = '–ì–æ—Ç–æ–≤–∞'
                return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
        return True
    
    def load_alerts_from_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(Config.ALERTS_FILE, 'r', encoding='utf-8') as f:
                alerts = json.load(f)
                st.session_state.alerts_history = alerts
        except FileNotFoundError:
            st.session_state.alerts_history = []
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    
    def run_single_scan(self, symbols=None):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.initialize_system():
            return []
        
        try:
            with st.spinner('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤...'):
                results = self.system.run_single_scan(symbols)
                st.session_state.scan_results = results
                st.session_state.last_scan_time = datetime.now()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
                if results:
                    for setup in results:
                        alert_data = {
                            'symbol': setup.symbol,
                            'setup_type': setup.setup_type,
                            'entry_price': setup.entry_price,
                            'stop_loss': setup.stop_loss,
                            'take_profit': setup.take_profit,
                            'risk_reward': setup.risk_reward,
                            'confidence': setup.confidence,
                            'timestamp': setup.timestamp.isoformat(),
                            'description': setup.description,
                            'leverage': setup.leverage,
                            'position_size': setup.position_size
                        }
                        st.session_state.alerts_history.append(alert_data)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                    self.save_alerts_to_file()
                    logging.info(f"–ù–∞–π–¥–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(results)} –∞–ª–µ—Ä—Ç–æ–≤")
                
                return results
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return []
    
    def save_alerts_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            with open(Config.ALERTS_FILE, 'w', encoding='utf-8') as f:
                json.dump(st.session_state.alerts_history, f, ensure_ascii=False, indent=2)
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(st.session_state.alerts_history)} –∞–ª–µ—Ä—Ç–æ–≤ –≤ —Ñ–∞–π–ª")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.monitoring_active and self.initialize_system():
            self.monitoring_active = True
            st.session_state.system_status = '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω'
            
            def monitoring_loop():
                while self.monitoring_active:
                    try:
                        results = self.system.run_single_scan()
                        if results:
                            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
                            for setup in results:
                                alert_data = {
                                    'symbol': setup.symbol,
                                    'setup_type': setup.setup_type,
                                    'entry_price': setup.entry_price,
                                    'stop_loss': setup.stop_loss,
                                    'take_profit': setup.take_profit,
                                    'risk_reward': setup.risk_reward,
                                    'confidence': setup.confidence,
                                    'timestamp': setup.timestamp.isoformat(),
                                    'description': setup.description,
                                    'leverage': setup.leverage,
                                    'position_size': setup.position_size
                                }
                                st.session_state.alerts_history.append(alert_data)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–µ—Ä—Ç—ã –≤ —Ñ–∞–π–ª
                            self.save_alerts_to_file()
                            logging.info(f"–ù–∞–π–¥–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(results)} –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤")
                        
                        st.session_state.last_scan_time = datetime.now()
                        time.sleep(Config.SCAN_INTERVAL_MINUTES * 60)
                        
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                        time.sleep(60)
            
            self.monitoring_thread = threading.Thread(target=monitoring_loop, daemon=True)
            self.monitoring_thread.start()
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring_active = False
        st.session_state.system_status = '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
        if self.monitoring_thread and self.monitoring_thread.is_alive():
            logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        if st.session_state.alerts_history:
            self.save_alerts_to_file()

def render_sidebar():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
    st.sidebar.title("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    status = st.session_state.system_status
    if status == '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω':
        st.sidebar.success(f"–°—Ç–∞—Ç—É—Å: {status}")
    elif status == '–ì–æ—Ç–æ–≤–∞':
        st.sidebar.info(f"–°—Ç–∞—Ç—É—Å: {status}")
    else:
        st.sidebar.warning(f"–°—Ç–∞—Ç—É—Å: {status}")
    
    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    if st.session_state.last_scan_time:
        time_diff = datetime.now() - st.session_state.last_scan_time
        st.sidebar.text(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {time_diff.seconds // 60} –º–∏–Ω –Ω–∞–∑–∞–¥")
    
    st.sidebar.markdown("---")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    st.sidebar.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É
    risk_pct = st.sidebar.slider(
        "–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%)",
        min_value=1,
        max_value=20,
        value=Config.RISK_PERCENTAGE,
        help="–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≥–æ—Ç–æ–≤—ã —Ä–∏—Å–∫–æ–≤–∞—Ç—å –Ω–∞ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ"
    )
    Config.RISK_PERCENTAGE = risk_pct
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ R:R
    min_rr = st.sidebar.slider(
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ R:R",
        min_value=1.0,
        max_value=5.0,
        value=float(Config.MIN_RISK_REWARD),
        step=0.1,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å"
    )
    Config.MIN_RISK_REWARD = min_rr
    
    # –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    scan_interval = st.sidebar.selectbox(
        "–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
        [15, 30, 60, 120],
        index=1,
        help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö"
    )
    Config.SCAN_INTERVAL_MINUTES = scan_interval
    
    # –§–∏–ª—å—Ç—Ä—ã
    st.sidebar.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")
    
    enable_btc_filter = st.sidebar.checkbox(
        "–§–∏–ª—å—Ç—Ä –ø–æ –¥–æ–º–∏–Ω–∞—Ü–∏–∏ BTC",
        value=Config.ENABLE_BTC_DOMINANCE_FILTER,
        help="–£—á–∏—Ç—ã–≤–∞—Ç—å –¥–æ–º–∏–Ω–∞—Ü–∏—é Bitcoin –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–µ—Ç–∞–ø–æ–≤"
    )
    Config.ENABLE_BTC_DOMINANCE_FILTER = enable_btc_filter
    
    min_volume = st.sidebar.number_input(
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º (USD)",
        min_value=100000,
        max_value=10000000,
        value=Config.MIN_VOLUME_USD,
        step=100000,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π 24-—á–∞—Å–æ–≤–æ–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤"
    )
    Config.MIN_VOLUME_USD = min_volume
    
    return {
        'risk_percentage': risk_pct,
        'min_risk_reward': min_rr,
        'scan_interval': scan_interval,
        'enable_btc_filter': enable_btc_filter,
        'min_volume': min_volume
    }

def render_main_dashboard(dashboard_manager):
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
    st.title("üìà Trading Alerts Dashboard")
    st.markdown("–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ
    if Config.is_demo_mode():
        st.warning("""
        **‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –î–ï–ú–û-–†–ï–ñ–ò–ú–ï.**

        –î–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ –≤–∞—à–µ–º `.env` —Ñ–∞–π–ª–µ.
        """)

    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    status_color = {
        '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞': 'üî¥',
        '–ì–æ—Ç–æ–≤–∞': 'üü°', 
        '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω': 'üü¢'
    }
    current_status = st.session_state.system_status
    st.markdown(f"**–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:** {status_color.get(current_status, '‚ö™')} {current_status}")
    
    if st.session_state.last_scan_time:
        st.markdown(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:** {st.session_state.last_scan_time.strftime('%H:%M:%S %d.%m.%Y')}")
    
    st.markdown("---")
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_alerts = len(st.session_state.alerts_history)
        st.metric("–í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤", total_alerts)
    
    with col2:
        today_alerts = len([
            alert for alert in st.session_state.alerts_history
            if datetime.fromisoformat(alert['timestamp']).date() == datetime.now().date()
        ])
        st.metric("–ê–ª–µ—Ä—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è", today_alerts)
    
    with col3:
        if st.session_state.alerts_history:
            avg_confidence = sum(alert['confidence'] for alert in st.session_state.alerts_history) / len(st.session_state.alerts_history)
            st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_confidence*100:.1f}%")
        else:
            st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "0%")
    
    with col4:
        balance = Config.ACCOUNT_BALANCE
        st.metric("–ë–∞–ª–∞–Ω—Å", f"${balance}")
    
    st.markdown("---")
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üîç –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", type="primary"):
            results = dashboard_manager.run_single_scan()
            if results:
                st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!")
            else:
                st.info("–¢–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    with col2:
        if st.button("üéØ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ø –º–æ–Ω–µ—Ç—ã"):
            results = dashboard_manager.run_single_scan(Config.PRIORITY_SYMBOLS)
            if results:
                st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ —Ç–æ–ø –º–æ–Ω–µ—Ç–∞—Ö!")
            else:
                st.info("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Ç–æ–ø –º–æ–Ω–µ—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    with col3:
        if st.session_state.system_status != '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω':
            if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"):
                dashboard_manager.start_monitoring()
                st.success("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")
                st.rerun()
        else:
            if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"):
                dashboard_manager.stop_monitoring()
                st.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                st.rerun()
    
    with col4:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            dashboard_manager.load_alerts_from_file()
            st.success("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            st.rerun()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–ª–µ—Ä—Ç—ã"):
            dashboard_manager.save_alerts_to_file()
            st.success("–ê–ª–µ—Ä—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª!")
    
    with col2:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            if st.session_state.alerts_history:
                st.session_state.alerts_history = []
                dashboard_manager.save_alerts_to_file()
                st.success("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
                st.rerun()
            else:
                st.info("–ò—Å—Ç–æ—Ä–∏—è —É–∂–µ –ø—É—Å—Ç–∞")
    
    with col3:
        if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
            if st.session_state.alerts_history:
                total = len(st.session_state.alerts_history)
                high_conf = len([a for a in st.session_state.alerts_history if a['confidence'] >= 0.8])
                avg_rr = sum(a['risk_reward'] for a in st.session_state.alerts_history) / total
                st.info(f"–í—Å–µ–≥–æ: {total} | –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {high_conf} | –°—Ä–µ–¥–Ω–∏–π R:R: 1:{avg_rr:.1f}")
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

def render_scan_results():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if st.session_state.scan_results:
        st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        for i, setup in enumerate(st.session_state.scan_results):
            with st.expander(f"{setup.symbol} - {setup.setup_type} (–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {setup.confidence*100:.0f}%)"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**üíµ –í—Ö–æ–¥:** ${setup.entry_price:.4f}")
                    st.write(f"**üõë –°—Ç–æ–ø:** ${setup.stop_loss:.4f}")
                    st.write(f"**üéØ –¶–µ–ª—å:** ${setup.take_profit:.4f}")
                    st.write(f"**üìä R:R:** 1:{setup.risk_reward:.1f}")
                
                with col2:
                    st.write(f"**‚ö° –ü–ª–µ—á–æ:** {setup.leverage}x")
                    st.write(f"**üí∞ –†–∞–∑–º–µ—Ä:** ${setup.position_size:.0f}")
                    st.write(f"**üí∏ –†–∏—Å–∫:** ${setup.risk_amount:.0f}")
                    st.write(f"**üåç –†—ã–Ω–æ–∫:** {setup.market_condition}")
                
                st.write(f"**üìù –û–ø–∏—Å–∞–Ω–∏–µ:** {setup.description}")
                
                # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                col1, col2, col3 = st.columns(3)
                with col1:
                    if st.button(f"üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª {i+1}", key=f"copy_{i}"):
                        signal_text = f"""
üö® –¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ
üí∞ {setup.symbol}
üìà {setup.setup_type}
üíµ –í—Ö–æ–¥: ${setup.entry_price:.4f}
üõë –°—Ç–æ–ø: ${setup.stop_loss:.4f}
üéØ –¶–µ–ª—å: ${setup.take_profit:.4f}
üìä R:R: 1:{setup.risk_reward:.1f}
‚ö° –ü–ª–µ—á–æ: {setup.leverage}x
‚≠ê –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {setup.confidence*100:.0f}%
                        """
                        st.code(signal_text)
                
                with col2:
                    if st.button(f"üìä –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ {i+1}", key=f"chart_{i}"):
                        st.info("–§—É–Ω–∫—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
                
                with col3:
                    if st.button(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ {i+1}", key=f"save_{i}"):
                        st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

def render_alerts_history():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    st.subheader("üìã –ò—Å—Ç–æ—Ä–∏—è –∞–ª–µ—Ä—Ç–æ–≤")
    
    if not st.session_state.alerts_history:
        st.info("–ò—Å—Ç–æ—Ä–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –ø—É—Å—Ç–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤.")
        return
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        date_filter = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            ["–í—Å–µ –≤—Ä–µ–º—è", "–°–µ–≥–æ–¥–Ω—è", "–í—á–µ—Ä–∞", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"]
        )
    
    with col2:
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Å–µ—Ç–∞–ø–∞
        setup_types = list(set(alert['setup_type'] for alert in st.session_state.alerts_history))
        setup_filter = st.selectbox(
            "–¢–∏–ø —Å–µ—Ç–∞–ø–∞",
            ["–í—Å–µ"] + setup_types
        )
    
    with col3:
        # –§–∏–ª—å—Ç—Ä –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence_filter = st.slider(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)",
            0, 100, 0
        )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_alerts = st.session_state.alerts_history.copy()
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    if date_filter != "–í—Å–µ –≤—Ä–µ–º—è":
        now = datetime.now()
        if date_filter == "–°–µ–≥–æ–¥–Ω—è":
            start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
        elif date_filter == "–í—á–µ—Ä–∞":
            start_date = (now - timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
        elif date_filter == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π":
            start_date = now - timedelta(days=7)
        elif date_filter == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π":
            start_date = now - timedelta(days=30)
        
        filtered_alerts = [
            alert for alert in filtered_alerts
            if datetime.fromisoformat(alert['timestamp']) >= start_date
        ]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Å–µ—Ç–∞–ø–∞
    if setup_filter != "–í—Å–µ":
        filtered_alerts = [
            alert for alert in filtered_alerts
            if alert['setup_type'] == setup_filter
        ]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    filtered_alerts = [
        alert for alert in filtered_alerts
        if alert['confidence'] * 100 >= confidence_filter
    ]
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    filtered_alerts.sort(key=lambda x: x['timestamp'], reverse=True)
    
    st.write(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered_alerts)} –∏–∑ {len(st.session_state.alerts_history)} –∞–ª–µ—Ä—Ç–æ–≤")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
    for alert in filtered_alerts[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20
        timestamp = datetime.fromisoformat(alert['timestamp'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if alert['confidence'] >= 0.8:
            card_class = "success-alert"
        elif alert['confidence'] >= 0.6:
            card_class = "warning-alert"
        else:
            card_class = "danger-alert"
        
        with st.container():
            st.markdown(f"""
            <div class="alert-card {card_class}">
                <h4>{alert['symbol']} - {alert['setup_type']}</h4>
                <p><strong>–í—Ä–µ–º—è:</strong> {timestamp.strftime('%d.%m.%Y %H:%M:%S')}</p>
                <p><strong>–í—Ö–æ–¥:</strong> ${alert['entry_price']:.4f} | 
                   <strong>–°—Ç–æ–ø:</strong> ${alert['stop_loss']:.4f} | 
                   <strong>–¶–µ–ª—å:</strong> ${alert['take_profit']:.4f}</p>
                <p><strong>R:R:</strong> 1:{alert['risk_reward']:.1f} | 
                   <strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</strong> {alert['confidence']*100:.0f}%</p>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {alert.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}</p>
            </div>
            """, unsafe_allow_html=True)

def render_analytics():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    st.subheader("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    if not st.session_state.alerts_history:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        return
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = pd.DataFrame(st.session_state.alerts_history)
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df['date'] = df['timestamp'].dt.date
    df['hour'] = df['timestamp'].dt.hour
    
    col1, col2 = st.columns(2)
    
    with col1:
        # –ì—Ä–∞—Ñ–∏–∫ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ –¥–Ω—è–º
        daily_alerts = df.groupby('date').size().reset_index(name='count')
        fig_daily = px.line(
            daily_alerts, 
            x='date', 
            y='count',
            title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ –¥–Ω—è–º',
            labels={'date': '–î–∞—Ç–∞', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–µ—Ä—Ç–æ–≤'}
        )
        st.plotly_chart(fig_daily, use_container_width=True)
    
    with col2:
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ —Ç–∏–ø–∞–º —Å–µ—Ç–∞–ø–æ–≤
        setup_counts = df['setup_type'].value_counts()
        fig_setups = px.pie(
            values=setup_counts.values,
            names=setup_counts.index,
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º —Å–µ—Ç–∞–ø–æ–≤'
        )
        st.plotly_chart(fig_setups, use_container_width=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        fig_confidence = px.histogram(
            df,
            x='confidence',
            nbins=20,
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏',
            labels={'confidence': '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'}
        )
        st.plotly_chart(fig_confidence, use_container_width=True)
    
    with col2:
        # –¢–æ–ø —Å–∏–º–≤–æ–ª–æ–≤
        symbol_counts = df['symbol'].value_counts().head(10)
        fig_symbols = px.bar(
            x=symbol_counts.values,
            y=symbol_counts.index,
            orientation='h',
            title='–¢–æ–ø-10 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–ª–µ—Ä—Ç–æ–≤',
            labels={'x': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–µ—Ä—Ç–æ–≤', 'y': '–°–∏–º–≤–æ–ª'}
        )
        st.plotly_chart(fig_symbols, use_container_width=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        avg_rr = df['risk_reward'].mean()
        st.metric("–°—Ä–µ–¥–Ω–µ–µ R:R", f"1:{avg_rr:.1f}")
    
    with col2:
        avg_confidence = df['confidence'].mean()
        st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_confidence*100:.1f}%")
    
    with col3:
        high_confidence = len(df[df['confidence'] >= 0.8])
        st.metric("–í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (‚â•80%)", high_confidence)
    
    with col4:
        unique_symbols = df['symbol'].nunique()
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤", unique_symbols)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞
    dashboard_manager = DashboardManager()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    dashboard_manager.load_alerts_from_file()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    settings = render_sidebar()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    tab1, tab2, tab3, tab4 = st.tabs(["üè† –ì–ª–∞–≤–Ω–∞—è", "üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üìã –ò—Å—Ç–æ—Ä–∏—è", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
    
    with tab1:
        render_main_dashboard(dashboard_manager)
    
    with tab2:
        render_scan_results()
    
    with tab3:
        render_alerts_history()
    
    with tab4:
        render_analytics()
    
    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω
    if st.session_state.system_status == '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        st.sidebar.success("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω")
        st.sidebar.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è")
        
        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        time.sleep(10)
        st.rerun()
    else:
        st.sidebar.info("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()